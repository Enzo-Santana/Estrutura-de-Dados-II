#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Função para ordenar usando o Shell Sort com a sequência de Shell
void shellSortShell(int arr[], int size) {
    for (int gap = size / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < size; i++) {
            int temp = arr[i];
            int j = i;
            while (j >= gap && arr[j - gap] > temp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
    }
}

// Função para ordenar usando o Shell Sort com a sequência de Knuth
void shellSortKnuth(int arr[], int size) {
    int gap = 1;
    while (gap < size / 3) {
        gap = 3 * gap + 1;
    }

    while (gap > 0) {
        for (int i = gap; i < size; i++) {
            int temp = arr[i];
            int j = i;
            while (j >= gap && arr[j - gap] > temp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
        gap = (gap - 1) / 3;
    }
}

// Função para ordenar usando o Shell Sort com a sequência de Hibbard
void shellSortHibbard(int arr[], int size) {
    int gap = 1;
    while (gap < size) {
        gap = 2 * gap + 1;
    }

    while (gap > 0) {
        for (int i = gap; i < size; i++) {
            int temp = arr[i];
            int j = i;
            while (j >= gap && arr[j - gap] > temp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
        gap = (gap - 1) / 2;
    }
}

// Função para gerar um vetor aleatório
void generateRandomArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 10000; // Números aleatórios entre 0 e 9999
    }
}

// Função principal para medir e comparar os tempos de execução
int main() {
    int size = 10000; // Tamanho da lista
    int arr[size];
    clock_t start, end;

    // Teste com a sequência de Shell
    generateRandomArray(arr, size);
    start = clock();
    shellSortShell(arr, size);
    end = clock();
    printf("Shell Sort (Sequência de Shell): %lf segundos\n", (double)(end - start) / CLOCKS_PER_SEC);

    // Teste com a sequência de Knuth
    generateRandomArray(arr, size);
    start = clock();
    shellSortKnuth(arr, size);
    end = clock();
    printf("Shell Sort (Sequência de Knuth): %lf segundos\n", (double)(end - start) / CLOCKS_PER_SEC);

    // Teste com a sequência de Hibbard
    generateRandomArray(arr, size);
    start = clock();
    shellSortHibbard(arr, size);
    end = clock();
    printf("Shell Sort (Sequência de Hibbard): %lf segundos\n", (double)(end - start) / CLOCKS_PER_SEC);

    return 0;
}
