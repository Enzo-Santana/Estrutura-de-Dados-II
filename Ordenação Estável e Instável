Algoritmos de ordenação são considerados **estáveis** quando, ao ordenar uma lista, os elementos com o mesmo valor mantêm sua ordem relativa original. Isso significa que, se dois elementos têm o mesmo valor, o algoritmo não os troca de posição 
em relação um ao outro. Por exemplo, se temos uma lista de tuplas onde o primeiro elemento é a chave de ordenação e o segundo elemento é a ordem de chegada (ou qualquer outro critério), um algoritmo estável irá preservar a ordem de chegada dos 
elementos com chaves iguais.
Algoritmos como o **Merge Sort** e o **Insertion Sort** são exemplos de algoritmos estáveis. No caso do **Merge Sort**, quando ele divide a lista em sublistas e depois as combina, ele sempre coloca o elemento da sublista esquerda antes de um 
elemento igual da sublista direita, preservando a ordem dos elementos iguais. Por exemplo, considere a lista `[2, 1, 2, 3, 2]`. Após ordenar usando o Merge Sort, a lista ficaria `[1, 2, 2, 2, 3]`, mantendo a ordem relativa dos elementos `2` 
como estavam originalmente. Outro exemplo é o **Insertion Sort**, que, ao ordenar uma lista, insere os elementos na posição correta enquanto mantém a ordem dos elementos iguais. Suponha que temos a lista `[4, 1, 4, 3]`. Quando ordenada com o 
Insertion Sort, ela se tornaria `[1, 3, 4, 4]`, com os dois `4` permanecendo na mesma ordem que estavam antes da ordenação. Por outro lado, o **Quick Sort** e o **Selection Sort** não são algoritmos estáveis. O **Quick Sort** pode alterar a 
ordem relativa de elementos iguais ao escolher um pivô e fazer as trocas, sem garantir que os elementos com a mesma chave permanecerão na mesma ordem relativa. Por exemplo, ao ordenar a lista `[2, 1, 2, 3, 2]` com o Quick Sort, a ordem dos 
dois `2` pode ser alterada dependendo de como o pivô é escolhido. No caso do **Selection Sort**, que escolhe o menor (ou maior) elemento da lista e o coloca em sua posição correta, ele pode trocar elementos de forma a mudar a ordem de elementos iguais. Por exemplo, na lista `[4, 2, 4, 3]`, o Selection Sort pode acabar ordenando como `[2, 3, 4, 4]`, mas a ordem dos dois `4` pode ser trocada em alguns casos. 
Portanto, um algoritmo estável é útil quando precisamos garantir que a ordem dos elementos iguais, conforme seu critério original, seja preservada, o que pode ser importante em contextos como a ordenação de registros de banco de dados ou listas de pessoas.
