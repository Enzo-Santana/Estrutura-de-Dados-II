#include <stdio.h>
#include <string.h>

// Função para mesclar duas sublistas ordenadas
void merge(char arr[][100], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    char L[n1][100], R[n2][100];

    for (int i = 0; i < n1; i++) 
        strcpy(L[i], arr[l + i]);
    for (int j = 0; j < n2; j++) 
        strcpy(R[j], arr[m + 1 + j]);

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (strcmp(L[i], R[j]) <= 0) {
            strcpy(arr[k], L[i]);
            i++;
        } else {
            strcpy(arr[k], R[j]);
            j++;
        }
        k++;
    }

    while (i < n1) {
        strcpy(arr[k], L[i]);
        i++;
        k++;
    }

    while (j < n2) {
        strcpy(arr[k], R[j]);
        j++;
        k++;
    }
}

// Função para ordenar o array de palavras
void mergeSort(char arr[][100], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        
        mergeSort(arr, l, m);  // Ordena a metade esquerda
        mergeSort(arr, m + 1, r);  // Ordena a metade direita

        merge(arr, l, m, r);  // Mescla as duas metades ordenadas
    }
}

int main() {
    char arr[5][100] = {"banana", "apple", "orange", "kiwi", "grape"};
    int n = 5;

    mergeSort(arr, 0, n - 1);

    printf("Palavras ordenadas: \n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", arr[i]);
    }

    return 0;
}
