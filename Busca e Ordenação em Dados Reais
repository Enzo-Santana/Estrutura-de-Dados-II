#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NUM_ALUNOS 10
#define MAX_NOTA 100

// Estrutura para armazenar informações de cada aluno
typedef struct {
    char nome[50];
    int nota;
} Aluno;

// Função para realizar o Bucket Sort
void bucketSort(Aluno arr[], int n) {
    // Criar os baldes
    int i, j;
    Aluno* buckets[MAX_NOTA + 1]; // Cada balde para uma nota entre 0 e 100
    for (i = 0; i <= MAX_NOTA; i++) {
        buckets[i] = (Aluno*) malloc(n * sizeof(Aluno)); // Alocar espaço para os baldes
    }
    
    // Coloca os alunos nos baldes baseados nas suas notas
    for (i = 0; i < n; i++) {
        int index = arr[i].nota;
        buckets[index][0].nota = arr[i].nota; // A primeira posição guarda a nota
        strcpy(buckets[index][0].nome, arr[i].nome); // Guarda o nome do aluno
    }
    
    // Ordenar os alunos dentro dos baldes usando o algoritmo de ordenação simples (insertion sort)
    for (i = 0; i <= MAX_NOTA; i++) {
        int num = 0;
        while (buckets[i][num].nota != 0) { // Verifica se o balde não está vazio
            num++;
        }
        // Ordena os alunos dentro do balde
        for (int k = 0; k < num; k++) {
            for (j = k + 1; j < num; j++) {
                if (buckets[i][k].nota > buckets[i][j].nota) {
                    Aluno temp = buckets[i][k];
                    buckets[i][k] = buckets[i][j];
                    buckets[i][j] = temp;
                }
            }
        }
    }

    // Recoloca os alunos ordenados de volta no array original
    int index = 0;
    for (i = 0; i <= MAX_NOTA; i++) {
        for (j = 0; j < NUM_ALUNOS; j++) {
            if (buckets[i][j].nota != 0) {
                arr[index++] = buckets[i][j];
            }
        }
    }
}

// Função para realizar o Interpolation Search
int interpolationSearch(Aluno arr[], int n, int targetNota) {
    int low = 0, high = n - 1;
    while (low <= high && targetNota >= arr[low].nota && targetNota <= arr[high].nota) {
        // Calcular a posição do "pivô"
        int pos = low + ((double)(high - low) / (arr[high].nota - arr[low].nota)) * (targetNota - arr[low].nota);

        if (arr[pos].nota == targetNota)
            return pos; // Retorna a posição se a nota for encontrada

        if (arr[pos].nota < targetNota)
            low = pos + 1;
        else
            high = pos - 1;
    }
    return -1; // Retorna -1 se a nota não for encontrada
}

int main() {
    // Lista de alunos com suas respectivas notas
    Aluno alunos[NUM_ALUNOS] = {
        {"Alice", 85},
        {"Bob", 75},
        {"Charlie", 95},
        {"David", 60},
        {"Eve", 70},
        {"Frank", 88},
        {"Grace", 90},
        {"Heidi", 55},
        {"Ivan", 65},
        {"Judy", 80}
    };
    
    // Ordena os alunos pelas notas usando o Bucket Sort
    bucketSort(alunos, NUM_ALUNOS);

    // Exibe a lista ordenada
    printf("Alunos ordenados por notas:\n");
    for (int i = 0; i < NUM_ALUNOS; i++) {
        printf("%s - Nota: %d\n", alunos[i].nome, alunos[i].nota);
    }
    
    // Busca por uma nota específica
    int notaBusca;
    printf("\nDigite a nota para buscar: ");
    scanf("%d", &notaBusca);

    int index = interpolationSearch(alunos, NUM_ALUNOS, notaBusca);
    
    if (index != -1)
        printf("\nAluno com a nota %d encontrado: %s\n", alunos[index].nota, alunos[index].nome);
    else
        printf("\nAluno com a nota %d não encontrado.\n", notaBusca);
    
    return 0;
}
